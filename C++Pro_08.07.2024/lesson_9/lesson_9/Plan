1. Класс SensorMetric

Задача: Представление данных сенсора.

    Что хранит:
        QString name: Название сенсора.
        int value: Значение, которое сенсор передал.
    Что делает:
        Этот класс (структура) просто хранит данные и передает их между другими классами. Сам по себе он не выполняет никакой логики.



2. Класс Sensor

Задача: Генерация и отправка данных от сенсора.

    Что делает:
        Метод void newData(int value): Этот метод принимает новое значение от сенсора. Он создает объект SensorMetric, заполняет его данными (имя сенсора и значение), и затем генерирует сигнал dataReady с этими данными.
    Сигналы:
        dataReady(const SensorMetric& aSensorMetric): Этот сигнал отправляет данные сенсора другим классам (например, Logger и Analyzer).



3. Класс Logger

Задача: Запись данных в файл и вывод их в консоль.

    Что делает:
        Слот void writeData(const SensorMetric& aSensorMetric): Принимает данные от сенсора (через сигнал dataReady от Sensor) и записывает их в файл. Также можно выводить данные в консоль.




4. Класс Analyzer

Задача: Анализ данных, поступающих от сенсоров, и вывод аналитики по запросу.

    Что делает:
        Слот void analyzeData(const SensorMetric& aSensorMetric): Принимает данные от сенсоров и сохраняет их для анализа.
        Метод void reportPrint() const: Выводит в консоль результаты анализа (максимум, минимум, среднее арифметическое, медиану) по каждому сенсору и по всем сенсорам.



5. Связи между классами:

    Sensor → Logger: Когда сенсор генерирует новые данные, сигнал dataReady передает эти данные в Logger для записи в файл.
    Sensor → Analyzer: Тот же сигнал dataReady передает данные в Analyzer для анализа и хранения.
    Analyzer::reportPrint: Этот метод может быть вызван по запросу для вывода аналитики.



6. Конфигурация в Config.hpp:

Задача: Хранение всех констант и конфигураций.

    Константы, такие как максимальное количество записей (MAX_RECORDS), путь к файлам и формат даты, хранятся здесь.


Заключение:

    Начни с реализации классов SensorMetric, Sensor, Logger и Analyzer по приведенным выше примерам.
    Настрой сигналы и слоты для передачи данных между классами.
    Создай методы для анализа и логирования данных.
    Проведи симуляцию работы сенсоров, генерируя данные и проверяя, как они обрабатываются и сохраняются.

